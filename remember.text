


  const arr = [1, 2, 3]
  Array.prototype.myMap = function (callback: any) {
    const output = []
    for (let i = 0; i < arr.length; i++) {
      output.push(callback(arr[i]))
    }
    return output
  }
  Array.prototype.myFilter = function (callback: any) {
    const output = []
    for (let i = 0; i < arr.length; i++) {
      output.push(callback(arr[i]))
    }
    return output
  }
})
const array = [1, 2, 4, -1, 3]
const array2 = [1,2,2,2,3,3]

const func = (arr: number[]) => {
let negative = arr.find((item) => item < 0)
  let indexOfNegative = arr.findIndex((item) => item < 0)
  const output = []
  for (let i = 0; i < arr.length; i++) {
    if (negative && negative + arr[i] === 0){
      console.log(negative, arr[i])
      output.push(indexOfNegative,i)
    }
  }
  return output.length?output:null
}

const countOccurences = (arr:number[]) => {
  const output:any = {}
  for (let i = 0; i < arr.length; i++) {
    if (!output[arr[i]]) {
      output[arr[i]] = 1
    }else {
      output[arr[i]]++
    }
  }
  return output
}

// console.log(countOccurences(array2))

const countPositivesSumNegatives = (input: number[] | null): number[] => {
  let countOfPositives:number = 0;
  let sumOfNegatives:number = 0;
  const output:number[] = [];
  if (input === null) {
    return []
  }
  for (let i = 0;i < input.length;i++){
    if (Math.sign(input[i]) === 1) {
      countOfPositives++;
    }
    if (Math.sign(input[i]) === -1) {
      sumOfNegatives+=input[i];
    }

  }
  output.push(countOfPositives,sumOfNegatives)
  return output
}
const arr:number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]
console.log(countPositivesSumNegatives(arr))

<div class="fixed inset-0 z-0 bg-gray-300/60 backdrop-blur-sm" id="headlessui-popover-backdrop-:rd:" aria-hidden="true" data-headlessui-state="open" data-open="" style="opacity: 1;"></div>

<div class="absolute inset-x-0 top-0 z-0 origin-top rounded-b-2xl bg-gray-50 px-6 pt-32 pb-6 shadow-2xl shadow-gray-900/20" id="headlessui-popover-panel-:re:" tabindex="-1" data-headlessui-state="open" data-open="" style="--button-width: 40px; opacity: 1; transform: none;"><div class="space-y-4"><a class="block text-base/7 tracking-tight text-gray-700" data-headlessui-state="open active" data-open="" data-active="" href="/#features">Features</a><a class="block text-base/7 tracking-tight text-gray-700" data-headlessui-state="open active" data-open="" data-active="" href="/#reviews">Reviews</a><a class="block text-base/7 tracking-tight text-gray-700" data-headlessui-state="open active" data-open="" data-active="" href="/#pricing">Pricing</a><a class="block text-base/7 tracking-tight text-gray-700" data-headlessui-state="open active" data-open="" data-active="" href="/#faqs">FAQs</a></div><div class="mt-8 flex flex-col gap-4"><a class="inline-flex justify-center rounded-lg border py-[calc(--spacing(2)-1px)] px-[calc(--spacing(3)-1px)] text-sm transition-colors border-gray-300 text-gray-700 hover:border-gray-400 active:bg-gray-100 active:text-gray-700/80" variant="outline" color="gray" href="/login">Log in</a><a class="inline-flex justify-center rounded-lg py-2 px-3 text-sm font-semibold transition-colors bg-gray-800 text-white hover:bg-gray-900 active:bg-gray-800 active:text-white/80" variant="solid" color="gray" href="#">Download the app</a></div></div>



<div v-if="resumeData.leftColumnSections.length > 0">
      <div v-for="(section, i) in resumeData.leftColumnSections" :key="i">
        <div v-if="section">
          <h3 class="font-bold font-sans uppercase my-2">
            {{ section.label }}
          </h3>
          <div v-if="section.content">
            <div>
              <input
                v-model="listInputModels.inputText"
                class="border rounded w-full p-2"
                placeholder="Title"
                type="text"
              />
            </div>
            <button
              class="capitalize p-3 bg-blue-500 text-white"
              @click="() => section.content?.push(listInputModels.inputText)"
            >
              Add new item
            </button>
          </div>
          <div v-if="section.content">
            <div v-for="(item, i) in section.content" :key="i">
              <input
                v-model="section.content[i]"
                class="border rounded w-full p-2"
                type="text"
              />
            </div>
          </div>

          <button
            class="p-3 text-white bg-red-600 uppercase"
            @click="removeSectionItem(resumeData.leftColumnSections, i)"
          >
            remove section {{ section.label }}
          </button>
        </div>
      </div>
    </div>

    custom sections

    <div>
          <h3 class="font-bold font-sans my-2 uppercase">Custom sections</h3>
          <button
            class="block p-4 rounded-full uppercase bg-blue-500 text-white"
            @click="
              addNewAnySection(
                resumeData.customSections,
                'customSection',
                emptySectionFields,
              )
            "
          >
            ADD NEW custom SECTION
          </button>

          <div
            v-if="resumeData.customSections && resumeData.customSections.length > 0"
          >
            <div v-for="(sec, i) in resumeData.customSections" :key="sec.id">
              <div class="flex flex-col space-y-2">
                <input
                  v-model="sec.title"
                  class="border rounded w-full p-2"
                  placeholder="section name"
                  type="text"
                />
                <input
                  v-model="sec.description"
                  class="border rounded w-full p-2"
                  placeholder="section desc"
                  type="text"
                />
                <div>
                  <div>
                    <label>
                      <input
                        v-model="sec.dates.current"
                        type="checkbox"
                        @change="changeCurrentDate(resumeData.customSections, i)"
                      />
                      <span>I currently work here</span>
                    </label>
                  </div>

                  <div
                    class="flex justify-between items-center space-x-2 space-y-2"
                  >
                    <DatePicker v-model="sec.dates.start" />
                    <DatePicker
                      v-model="sec.dates.end"
                      :disabled="sec.dates.current"
                    />
                  </div>
                </div>
              </div>
              <ClientOnly>
                <Editor
                  :id="'customSection-' + i"
                  v-model="sec.contentHTML"
                  :is-read-only="false"
                />
              </ClientOnly>
              <button
                class="p-4 rounded-full bg-blue-500 text-white"
                @click="removeCustomSectionItem(i, resumeData)"
              >
                REMOVE SECTION
              </button>
            </div>
          </div>
        </div>